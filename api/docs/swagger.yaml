definitions:
  config.DashboardConfigs:
    properties:
      display:
        properties:
          columns:
            type: integer
          displayMode:
            type: string
          searchResultsLimit:
            type: integer
          showBackgroundErrorWarning:
            type: boolean
        type: object
      integrations:
        properties:
          addAllMultiMangaMangasToDownloadIntegrations:
            type: boolean
          enqueueAllSuwayomiChaptersToDownload:
            type: boolean
        type: object
      manga:
        properties:
          allowedAddingMethods:
            items:
              type: string
            type: array
          allowedSources:
            items:
              type: string
            type: array
        type: object
      mantium:
        properties:
          version:
            type: string
        type: object
    type: object
  dashboard.BackgroundError:
    properties:
      message:
        description: Error message.
        type: string
      time:
        description: Time when the error occurred.
        type: string
    type: object
  manga.Chapter:
    properties:
      chapter:
        description: Chapter usually is the chapter number, but in some cases it can
          be a one-shot or a special chapter
        type: string
      internalID:
        description: InteralID is a unique identifier for the chapter in the source
        type: string
      name:
        description: Name is the name of the chapter
        type: string
      type:
        type: integer
      updatedAt:
        description: |-
          UpdatedAt is the time when the chapter was released or updated (read).
          Should truncate at the second.
          The timezone should be the default/system timezone.
        type: string
      url:
        description: |-
          URL is the URL of the chapter
          If custom manga chapter doesn't have a URL provided by the user, it should be like http://custom_manga/<uuid>.
        type: string
    type: object
  manga.HTMLSelector:
    properties:
      Attribute:
        type: string
      Regex:
        type: string
      Selector:
        type: string
    required:
    - Selector
    type: object
  manga.Manga:
    properties:
      coverImg:
        description: CoverImg is the cover image of the manga
        items:
          type: integer
        type: array
      coverImgFixed:
        description: |-
          CoverImgFixed is true if the cover image is fixed. If true, the cover image will not be updated when updating the manga metadata.
          It's used for when the cover image is manually set by the user.
        type: boolean
      coverImgResized:
        description: CoverImgResized is true if the cover image was resized
        type: boolean
      coverImgURL:
        description: CoverImgURL is the URL of the cover image
        type: string
      id:
        type: integer
      internalID:
        description: InteralID is a unique identifier for the manga in the source
        type: string
      lastReadChapter:
        allOf:
        - $ref: '#/definitions/manga.Chapter'
        description: |-
          LastReadChapter is the last chapter read by the user
          In a custom manga, this field represents the next manga the user should read
          or, if it's equal to the last released chapter, the manga is considered read.
      lastReleasedChapter:
        allOf:
        - $ref: '#/definitions/manga.Chapter'
        description: |-
          LastReleasedChapter is the last chapter released by the source
          If the custom manga has no more released chapter, it'll be equal to the LastReadChapter.
      lastReleasedChapterNameSelector:
        allOf:
        - $ref: '#/definitions/manga.HTMLSelector'
        description: LastReleasedChapterNameSelector is the selector used to find
          the last released chapter name in the source website
      lastReleasedChapterURLSelector:
        allOf:
        - $ref: '#/definitions/manga.HTMLSelector'
        description: LastReleasedChapterURLSelector is the selector used to find the
          last released chapter URL in the source website
      multiMangaID:
        description: When the manga is part of a multimanga, this field should be
          set to the multimanga ID
        type: integer
      name:
        description: Name is the name of the manga
        type: string
      preferredGroup:
        description: |-
          PreferredGroup is the preferred group that translates (and more) the manga.
          Not all sources have multiple groups. Currently not used.
        type: string
      searchNames:
        description: |-
          SearchNames should be the multimanga's mangas names.
          Used for searching mangas by name.
        items:
          type: string
        type: array
      source:
        description: |-
          Source is the source of the manga, usually the domain of the website.
          If source is the above CustomMangaSource const, it means the manga is a custom manga created by the user.
          and without a source site.
        type: string
      status:
        type: integer
      url:
        description: |-
          URL is the URL of the manga.
          If custom manga doesn't have a URL provided by the user, it should be like above CustomMangaSource/<uuid>.
        type: string
    type: object
  manga.MultiManga:
    properties:
      coverImg:
        description: CoverImg is the cover image of the multimanga
        items:
          type: integer
        type: array
      coverImgFixed:
        description: |-
          CoverImgFixed is true if the cover image is fixed. If false (default) the current manga's cover image should be used.
          Else, use the multimanga's cover image fields.
          It's used for when the cover image is manually set by the user.
        type: boolean
      coverImgResized:
        description: CoverImgResized is true if the cover image was resized
        type: boolean
      coverImgURL:
        description: CoverImgURL is the URL of the cover image
        type: string
      currentManga:
        $ref: '#/definitions/manga.Manga'
      id:
        type: integer
      lastReadChapter:
        $ref: '#/definitions/manga.Chapter'
      mangas:
        items:
          $ref: '#/definitions/manga.Manga'
        type: array
      status:
        description: All mangas in the multimanga should have the same status
        type: integer
    type: object
  models.MangaSearchResult:
    properties:
      coverURL:
        type: string
      description:
        type: string
      internalID:
        type: string
      lastChapter:
        type: string
      lastChapterURL:
        type: string
      name:
        type: string
      source:
        type: string
      status:
        type: string
      url:
        type: string
      year:
        type: integer
    type: object
  routes.AddCustomMangaRequest:
    properties:
      cover_img:
        items:
          type: integer
        type: array
      cover_img_url:
        type: string
      last_read_chapter:
        properties:
          chapter:
            type: string
          url:
            type: string
        type: object
      last_released_chapter_name_selector:
        $ref: '#/definitions/routes.HTMLSelectorRequest'
      last_released_chapter_url_selector:
        $ref: '#/definitions/routes.HTMLSelectorRequest'
      name:
        type: string
      status:
        maximum: 5
        minimum: 0
        type: integer
      url:
        type: string
    required:
    - name
    - status
    type: object
  routes.AddMangaRequest:
    properties:
      last_read_chapter:
        type: string
      last_read_chapter_internal_id:
        type: string
      last_read_chapter_url:
        type: string
      manga_internal_id:
        type: string
      status:
        maximum: 5
        minimum: 0
        type: integer
      url:
        type: string
    required:
    - status
    - url
    type: object
  routes.AddMangaToMultiMangaRequest:
    properties:
      manga_internal_id:
        type: string
      manga_url:
        type: string
    required:
    - manga_url
    type: object
  routes.HTMLSelectorRequest:
    properties:
      attribute:
        type: string
      regex:
        type: string
      selector:
        type: string
    required:
    - selector
    type: object
  routes.LastReadChapterRequest:
    properties:
      chapter:
        type: string
      internal_id:
        type: string
      url:
        type: string
    type: object
  routes.SearchMangaRequest:
    properties:
      limit:
        type: integer
      q:
        type: string
      source:
        type: string
    required:
    - q
    - source
    type: object
  routes.UpdateLastReleasedChapterSelectorsRequest:
    properties:
      name_selector:
        $ref: '#/definitions/routes.HTMLSelectorRequest'
      url_selector:
        $ref: '#/definitions/routes.HTMLSelectorRequest'
    type: object
  routes.UpdateMangaLastReadChapterRequest:
    properties:
      chapter:
        $ref: '#/definitions/routes.LastReadChapterRequest'
    type: object
  routes.UpdateMangaStatusRequest:
    properties:
      status:
        maximum: 5
        minimum: 0
        type: integer
    required:
    - status
    type: object
  routes.responseMessage:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /custom_manga:
    post:
      consumes:
      - application/json
      description: Inserts a custom manga into the database.
      parameters:
      - description: Manga data
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/routes.AddCustomMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add custom manga
  /custom_manga/last_read_chapter:
    patch:
      description: Updates a custom manga last read chapter in the database. If chapter
        not in body, set the last read chapter to the last released chapter if it
        exists, else set it to none. If both `chapter` and `chapter_url` are empty
        strings in the body, deletes the manga's last read chapter. You can't provide
        only the chapter_url. You must provide either the manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Chapter
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateMangaLastReadChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update custom manga last read chapter
  /custom_manga/last_released_chapter_selectors:
    patch:
      consumes:
      - application/json
      description: Update custom manga last released chapter selectors.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga current URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Selectors data
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateLastReleasedChapterSelectorsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update custom manga last released chapter selectors
  /custom_manga/name:
    patch:
      description: Updates a custom manga name in the database. You must provide either
        the manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga current URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: New manga name
        example: '"One Piece"'
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update custom manga name
  /dashboard/configs:
    get:
      description: Returns the dashboard configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.DashboardConfigs'
      summary: Get the dashboard configs
    post:
      consumes:
      - application/json
      description: Update the dashboard configs in the DB. Cannot update version.
      parameters:
      - description: Dashboard configs
        in: body
        name: configs
        required: true
        schema:
          $ref: '#/definitions/config.DashboardConfigs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update dashboard configs
  /dashboard/last_background_error:
    delete:
      description: Deletes the last error that happened in the background. Usually
        used to clear the error in the dashboard.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Delete the last background error
    get:
      description: Returns the last error that happened in the background. Usually
        used to display the error in the dashboard.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.BackgroundError'
      summary: Get the last background error
  /dashboard/last_update:
    get:
      description: Returns the last time a resource that should trigger an update
        in the iframe/dashboard was updated. Usually used to update the dashboard
        when an event not triggered by the user occurs.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Get the last update date
  /health:
    get:
      description: Returns status OK
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check route
  /manga:
    delete:
      description: Deletes a manga from the database. You must provide either the
        manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Delete manga
    get:
      description: Gets a manga from the database. You must provide either the manga
        ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"manga": mangaObj}'
          schema:
            $ref: '#/definitions/manga.Manga'
      summary: Get manga
    post:
      consumes:
      - application/json
      description: Gets a manga metadata from source and inserts into the database.
      parameters:
      - description: Manga data
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/routes.AddMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add manga
  /manga/chapters:
    get:
      description: Get a manga chapters from the source. You must provide either the
        manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Manga Internal ID
        example: '"1as4fa7"'
        in: query
        name: manga_internal_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"chapters": [chapterObj]}'
          schema:
            items:
              $ref: '#/definitions/manga.Chapter'
            type: array
      summary: Get manga chapters
  /manga/cover_img:
    patch:
      description: 'Updates a manga/custom manga cover image in the database. You
        must provide either the manga ID or the manga URL. You must provide only one
        of the following: cover_img, cover_img_url, get_cover_img_from_source. If
        it''s a custom manga, using get_cover_img_from_source will return an error
        message.'
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Manga Internal ID
        example: '"1as4fa7"'
        in: query
        name: manga_internal_id
        type: string
      - description: Manga cover image file. Remember to set the Content-Type header
          to 'multipart/form-data' when sending the request.
        in: formData
        name: cover_img
        type: file
      - description: Manga cover image URL
        example: '"https://example.com/cover.jpg"'
        in: query
        name: cover_img_url
        type: string
      - description: Let Mantium fetch the cover image from the source site
        example: true
        in: query
        name: get_cover_img_from_source
        type: boolean
      - description: Update manga cover image to  Mantium's default cover image
        example: true
        in: query
        name: use_mantium_default_img
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update manga cover image
  /manga/metadata:
    get:
      description: Gets the metadata for a manga from the source site.
      parameters:
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"manga": mangaObj}'
          schema:
            $ref: '#/definitions/manga.Manga'
      summary: Get manga metadata
  /manga/status:
    patch:
      description: Updates a manga status in the database. You must provide either
        the manga ID or the manga URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: Manga status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateMangaStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update manga status
  /manga/url:
    patch:
      description: Updates a custom manga URL in the database. You must provide either
        the manga ID or the manga current URL.
      parameters:
      - description: Manga ID
        example: 1
        in: query
        name: id
        type: integer
      - description: Manga current URL
        example: '"https://mangadex.org/title/1/one-piece"'
        in: query
        name: url
        type: string
      - description: 'Manga new URL '
        example: '"https://mangadex.org/title/2/two-piece"'
        in: query
        name: new_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update custom manga URL
  /mangas:
    get:
      description: Gets the current manga of multimangas and all custom mangas.
      produces:
      - application/json
      responses:
        "200":
          description: '{"mangas": [mangaObj]}'
          schema:
            items:
              $ref: '#/definitions/manga.Manga'
            type: array
      summary: Get mangas
  /mangas/add_to_kaizoku:
    post:
      description: Add the multimangas' current manga to Kaizoku. If it fails to add
        a manga, it will continue with the next manga. This is a heavy operation depending
        on the number of mangas in the database.
      parameters:
      - collectionFormat: csv
        description: 'Filter which mangas to add by status. 1=reading, 2=completed,
          3=on hold, 4=dropped, 5=plan to read. Example: status=1,2,3,5'
        in: query
        items:
          type: integer
        name: status
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add mangas to Kaizoku
  /mangas/add_to_suwayomi:
    post:
      description: Add the multimangas' current manga to Suwayomi. If it fails to
        add a manga, it will continue with the next manga. This is a heavy operation
        depending on the number of mangas in the database.
      parameters:
      - collectionFormat: csv
        description: 'Filter which mangas to add by status. 1=reading, 2=completed,
          3=on hold, 4=dropped, 5=plan to read. Example: status=1,2,3,5'
        in: query
        items:
          type: integer
        name: status
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add mangas to Suwayomi
  /mangas/add_to_tranga:
    post:
      description: Add the multimangas' current manga to Tranga. If it fails to add
        a manga, it will continue with the next manga. This is a heavy operation depending
        on the number of mangas in the database. Currently, only MangaDex mangas can
        be added to Tranga, but it'll try all mangas anyway.
      parameters:
      - collectionFormat: csv
        description: 'Filter which mangas to add by status. 1=reading, 2=completed,
          3=on hold, 4=dropped, 5=plan to read. Example: status=1,2,3,5'
        in: query
        items:
          type: integer
        name: status
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add mangas to Tranga
  /mangas/iframe:
    get:
      description: Returns an iFrame with mangas. Only mangas with unread chapters,
        and status reading or completed. Sort by last released chapter date.
      parameters:
      - description: API URL used by your browser. Used for the button that updates
          the last read chater, as your browser needs to send a request to the API
          to update the chapter.
        example: https://sub.domain.com
        in: query
        name: api_url
        required: true
        type: string
      - description: IFrame theme, defaults to light. If it's different from your
          dashboard theme, the background turns may turn white
        example: light
        in: query
        name: theme
        type: string
      - description: Limits the number of items in the iFrame.
        example: 5
        in: query
        name: limit
        type: integer
      - description: If true, shows a warning in the iFrame if an error occurred in
          the background. Defaults to true.
        example: true
        in: query
        name: showBackgroundErrorWarning
        type: boolean
      produces:
      - text/html
      responses:
        "200":
          description: HTML content
          schema:
            type: string
      summary: Mangas iFrame
  /mangas/metadata:
    patch:
      description: Get the mangas metadata from the sources and update them in the
        database.
      parameters:
      - description: Notify if a new chapter was released for the manga (only of mangas
          with status reading or completed).
        in: query
        name: notify
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update mangas metadata
  /mangas/search:
    post:
      consumes:
      - application/json
      description: Searches a manga in the source. You must provide the source name
        like "mangadex" and the search query.
      parameters:
      - description: Search data
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/routes.SearchMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"mangas": [mangaSearchResultObj]}'
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.MangaSearchResult'
              type: array
            type: object
      summary: Search manga
  /mangas/stats:
    get:
      description: Get the library stats from all multimangas and custom mangas.
      produces:
      - application/json
      responses:
        "200":
          description: '{"property": value}'
          schema:
            type: map
      summary: Get library stats
  /multimanga:
    delete:
      description: Deletes a multimanga from the database.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Delete multimanga
    get:
      description: Gets a multimanga from the database.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"multimanga": multimangaObj}'
          schema:
            $ref: '#/definitions/manga.MultiManga'
      summary: Get multimanga
    post:
      consumes:
      - application/json
      description: Gets a manga metadata from source and inserts it as the current
        manga of a new multimanga into the database.
      parameters:
      - description: Current manga data
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/routes.AddMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add multimanga
  /multimanga/chapters:
    get:
      description: Get chapters of the current manga of a multimanga from the source.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"chapters": [chapterObj]}'
          schema:
            items:
              $ref: '#/definitions/manga.Chapter'
            type: array
      summary: Get multimanga current manga chapters
  /multimanga/choose_current_manga:
    get:
      description: Check a multimanga mangas and returns which manga should be the
        current manga.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      - description: Manga IDs to exclude from the check
        example: '"1,2,3"'
        in: query
        name: exclude_manga_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"manga": mangaObj}'
          schema:
            $ref: '#/definitions/manga.Manga'
      summary: Choose current manga
  /multimanga/cover_img:
    patch:
      description: 'Updates a multimanga cover image in the database. You must provide
        only one of the following: cover_img, cover_img_url, use_current_manga_cover_img.'
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      - description: Multimanga cover image file. Remember to set the Content-Type
          header to 'multipart/form-data' when sending the request.
        in: formData
        name: cover_img
        type: file
      - description: Multimanga cover image URL
        example: '"https://example.com/cover.jpg"'
        in: query
        name: cover_img_url
        type: string
      - description: Use the multimanga's current manga cover image
        example: true
        in: query
        name: use_current_manga_cover_img
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update multimanga cover image
  /multimanga/last_read_chapter:
    patch:
      description: Updates a multimanga last read chapter in the database. It also
        needs to know from which manga the chapter is from. If both `chapter` and
        `chapter_url` are empty strings in the body, set the last read chapter to
        the last released chapter in the database.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      - description: Manga ID
        example: 1
        in: query
        name: manga_id
        required: true
        type: integer
      - description: Chapter
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateMangaLastReadChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update multimanga last read chapter
  /multimanga/manga:
    delete:
      consumes:
      - application/json
      description: Removes a manga from a multimanga list in the database.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      - description: Manga ID
        example: 1
        in: query
        name: manga_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Remove manga from multimanga list
    post:
      consumes:
      - application/json
      description: Adds a manga to a multimanga list in the database.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      - description: Manga data
        in: body
        name: manga
        required: true
        schema:
          $ref: '#/definitions/routes.AddMangaToMultiMangaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Add manga to multimanga list
  /multimanga/status:
    patch:
      description: Updates a multimanga status in the database.
      parameters:
      - description: Multimanga ID
        example: 1
        in: query
        name: id
        required: true
        type: integer
      - description: Multimanga status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateMangaStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.responseMessage'
      summary: Update multimanga status
  /multimangas:
    get:
      description: Gets all multimangas. The multimanga's mangas will have only the
        current manga. The current manga will have a possible wrong status, so use
        the multimanga's status.
      produces:
      - application/json
      responses:
        "200":
          description: '{"multimangas": [multimangaObj]}'
          schema:
            items:
              $ref: '#/definitions/manga.MultiManga'
            type: array
      summary: Get multimangas
swagger: "2.0"
